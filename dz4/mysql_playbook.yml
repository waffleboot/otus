---
- hosts: db
  become: yes
  gather_facts: no
  tasks:
    - name: repo
      ansible.builtin.yum:
        name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
    - ansible.builtin.command: percona-release enable-only pxc-80 release
    - ansible.builtin.command: percona-release enable tools release
    - name: pxc
      ansible.builtin.yum:
        name: percona-xtradb-cluster

    - name: node name
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        regexp: '^wsrep_node_name='
        line: wsrep_node_name=pxc-{{ inventory_hostname_short }}
    - name: cluster address
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        regexp: '^wsrep_cluster_address='
        line: wsrep_cluster_address=gcomm://192.168.0.41,192.168.0.42,192.168.0.43

- hosts: db-1.ru-central1.internal
  become: yes
  gather_facts: no
  tasks:
    - name: bootstrap
      ansible.builtin.systemd:
        name: mysql@bootstrap.service
        state: started
        enabled: yes

    - ansible.builtin.slurp:
        src: /var/log/mysqld.log
      register: log
    - ansible.builtin.set_fact:
        mysql_pwd: "{{ log.content | b64decode | regex_findall('A temporary password is generated for root@localhost: (.*)') | first }}"
    - name: change root password
      ansible.builtin.command: mysql --user=root --password={{mysql_pwd}} --connect-expired-password
      args:
        stdin: "ALTER USER 'root'@'localhost' IDENTIFIED BY 'rootPass'"
      ignore_errors: yes

    - name: fetch certs
      ansible.builtin.fetch:
        src: /var/lib/mysql/{{ item }}
        dest: var/lib/mysql/
        flat: yes
      with_items:
        - ca.pem
        - server-cert.pem
        - server-key.pem

- hosts: db-2.ru-central1.internal
  become: yes
  gather_facts: no
  tasks:
    - ansible.builtin.systemd:
        name: mysql
      register: mysql_status
    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
      ignore_errors: yes
      when: mysql_status.status.ActiveState != "active"
    - name: stop mysql
      ansible.builtin.systemd:
        name: mysql
        state: stopped
      when: mysql_status.status.ActiveState != "active"

    - name: upload certs
      ansible.builtin.copy:
        src: var/lib/mysql/{{ item }}
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
      with_items:
        - ca.pem
        - server-cert.pem
        - server-key.pem

    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
        enabled: yes

- hosts: db-3.ru-central1.internal
  become: yes
  gather_facts: no
  tasks:
    - ansible.builtin.systemd:
        name: mysql
      register: mysql_status
    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
      ignore_errors: yes
      when: mysql_status.status.ActiveState != "active"
    - name: stop mysql
      ansible.builtin.systemd:
        name: mysql
        state: stopped
      when: mysql_status.status.ActiveState != "active"

    - name: upload certs
      ansible.builtin.copy:
        src: var/lib/mysql/{{ item }}
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
      with_items:
        - ca.pem
        - server-cert.pem
        - server-key.pem

    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
        enabled: yes
















# - hosts: db-2.ru-central1.internal
#   become: yes
#   gather_facts: no
#   tasks:
#     - name: upload certs
#       ansible.builtin.copy:
#         src: var/lib/mysql/{{ item }}
#         dest: db/ssl/
#         owner: mysql
#         group: mysql
#       with_items:
#         - ca.pem
#         - server-cert.pem
#         - server-key.pem
#     - name: start mysql
#       ansible.builtin.systemd:
#         name: mysql
#         state: started
#         enabled: yes
#     - name: restart mysql
#       ansible.builtin.systemd:
#         name: mysql
#         state: restarted

  # vars:
  #   mysql_root_password: super-secure-password
  #   mysql_databases:
  #     - name: "{{WORDPRESS_DB_NAME}}"
  #       encoding: latin1
  #       collation: latin1_general_ci
  #   mysql_users:
  #     - name: "{{WORDPRESS_DB_USER}}"
  #       host: "%"
  #       password: "{{WORDPRESS_DB_PASSWORD}}"
  #       priv: "wordpress_db.*:ALL"
  # roles:
  #   - role: geerlingguy.mysql
