---
- hosts: db
  become: yes
  gather_facts: no
  tasks:
    - name: repo
      ansible.builtin.yum:
        name: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
    - ansible.builtin.command: percona-release enable-only pxc-80 release
    - ansible.builtin.command: percona-release enable tools release
    - name: pxc
      ansible.builtin.yum:
        name: percona-xtradb-cluster

    - name: node name
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        regexp: '^wsrep_node_name='
        line: wsrep_node_name=pxc-{{ inventory_hostname_short }}
    - name: cluster address
      ansible.builtin.lineinfile:
        path: /etc/my.cnf
        regexp: '^wsrep_cluster_address='
        line: wsrep_cluster_address=gcomm://192.168.0.41,192.168.0.42,192.168.0.43

- hosts: db-1.ru-central1.internal
  become: yes
  gather_facts: no
  tasks:
    - name: bootstrap
      ansible.builtin.systemd:
        name: mysql@bootstrap.service
        state: started
        enabled: yes
      register: result
      retries: 3
      delay: 10
      until: result is not failed

    - ansible.builtin.slurp:
        src: /var/log/mysqld.log
      register: log
    - ansible.builtin.set_fact:
        mysql_pwd: "{{ log.content | b64decode | regex_findall('A temporary password is generated for root@localhost: (.*)') | first }}"
    - name: change root password
      ansible.builtin.command: mysql --user=root --password={{mysql_pwd}} --connect-expired-password
      args:
        stdin: "ALTER USER 'root'@'localhost' IDENTIFIED BY 'rootPass'"
      ignore_errors: yes

    - name: fetch certs
      ansible.builtin.fetch:
        src: /var/lib/mysql/{{ item }}
        dest: var/lib/mysql/
        flat: yes
      with_items:
        - ca.pem
        - server-cert.pem
        - server-key.pem

- hosts: db-2.ru-central1.internal
  become: yes
  gather_facts: no
  tasks:
    - ansible.builtin.systemd:
        name: mysql
      register: mysql_status
    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
      ignore_errors: yes
      when: mysql_status.status.ActiveState != "active"
    - name: stop mysql
      ansible.builtin.systemd:
        name: mysql
        state: stopped
      when: mysql_status.status.ActiveState != "active"

    - name: upload certs
      ansible.builtin.copy:
        src: var/lib/mysql/{{ item }}
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
      with_items:
        - ca.pem
        - server-cert.pem
        - server-key.pem

    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
        enabled: yes

- hosts: db-3.ru-central1.internal
  become: yes
  gather_facts: no
  tasks:
    - ansible.builtin.systemd:
        name: mysql
      register: mysql_status
    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
      ignore_errors: yes
      when: mysql_status.status.ActiveState != "active"
    - name: stop mysql
      ansible.builtin.systemd:
        name: mysql
        state: stopped
      when: mysql_status.status.ActiveState != "active"

    - name: upload certs
      ansible.builtin.copy:
        src: var/lib/mysql/{{ item }}
        dest: /var/lib/mysql/
        owner: mysql
        group: mysql
      with_items:
        - ca.pem
        - server-cert.pem
        - server-key.pem

    - name: start mysql
      ansible.builtin.systemd:
        name: mysql
        state: started
        enabled: yes

- hosts: db-1.ru-central1.internal
  become: yes
  gather_facts: no
  tasks:
    - name: proxysql
      ansible.builtin.yum:
        name:
          - percona-xtradb-cluster-client
          - proxysql2
    - name: start proxysql
      systemd:
        name: proxysql
        state: started
        enabled: yes
    - name: wait
      ansible.builtin.wait_for:
        port: 6032
        state: started
        delay: 0
        timeout: 3
      ignore_errors: yes

    - name: configure proxysql
      command: mysql -uadmin -padmin -h 127.0.0.1 -P 6032
      args:
        stdin: '{{item}}'
      with_items:
        - INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (1,'192.168.0.41',3306);
        - INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (1,'192.168.0.42',3306);
        - INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (1,'192.168.0.43',3306);
        - LOAD MYSQL SERVERS TO RUNTIME;
        - SAVE MYSQL SERVERS TO DISK;
        - INSERT INTO mysql_replication_hostgroups (writer_hostgroup,reader_hostgroup,comment) VALUES (0,1,'cluster1');
        - LOAD MYSQL SERVERS TO RUNTIME;
        - SAVE MYSQL SERVERS TO DISK;

    - name: create proxysql user
      command: mysql -uroot -prootPass
      args:
        stdin: '{{item}}'
      with_items:
        - CREATE USER 'proxysql'@'%' IDENTIFIED WITH caching_sha2_password by 'Otus321$';
        - FLUSH PRIVILEGES;

    - name: create proxysql user
      command: mysql -uadmin -padmin -h 127.0.0.1 -P 6032
      args:
        stdin: '{{item}}'
      with_items:
        - UPDATE global_variables SET variable_value='proxysql' WHERE variable_name='mysql-monitor_username';
        - UPDATE global_variables SET variable_value='Otus321$' WHERE variable_name='mysql-monitor_password';
        - LOAD MYSQL VARIABLES TO RUNTIME;
        - SAVE MYSQL VARIABLES TO DISK;
        - INSERT INTO mysql_users (username,password) VALUES ('{{WORDPRESS_DB_USER}}','{{WORDPRESS_DB_PASSWORD}}');
        - LOAD MYSQL USERS TO RUNTIME;
        - SAVE MYSQL USERS TO DISK;

    - command: mysql -uroot -prootPass
      args:
        stdin: '{{item}}'
      with_items:
        - CREATE USER '{{WORDPRESS_DB_USER}}'@'%' IDENTIFIED WITH mysql_native_password BY '{{WORDPRESS_DB_PASSWORD}}';
        - GRANT ALL ON *.* TO '{{WORDPRESS_DB_USER}}'@'%';
        - FLUSH PRIVILEGES;
